<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('psprolib')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_psprolib.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('psprolib.so')) return;
    } else {
      if (!dl('psprolib.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class psprolib {
	const SG_IDTYPE_DEFAULT = 0;

	const SG_IDTYPE_IPHONE = SG_IDTYPE_IPHONE;

	const SG_IDTYPE_ANDROID = SG_IDTYPE_ANDROID;

	const SG_IDTYPE_BLACKBERRY = SG_IDTYPE_BLACKBERRY;

	const SG_IDTYPE_ETHERNET = SG_IDTYPE_ETHERNET;

	const SG_IDTYPE_HOSTNAME = SG_IDTYPE_HOSTNAME;

	const SG_IDTYPE_IPADDRESS = SG_IDTYPE_IPADDRESS;

	const SG_IDTYPE_USERNAME = SG_IDTYPE_USERNAME;

	const SG_IDTYPE_COUNTRY = SG_IDTYPE_COUNTRY;

	const SG_IDTYPE_INET6 = SG_IDTYPE_INET6;

	const SG_IDTYPE_VSN = SG_IDTYPE_VSN;

	const SG_IDTYPE_VENDOR = SG_IDTYPE_VENDOR;

	const SG_IDTYPE_ANY = SG_IDTYPE_ANY;

	const SG_IDTYPE_HOSTID = SG_IDTYPE_HOSTID;

	const SG_IDTYPE_MACINTOSH = SG_IDTYPE_MACINTOSH;

	const SG_IDTYPE_METERED = SG_IDTYPE_METERED;

	const SG_IDTYPE_OS = SG_IDTYPE_OS;

	const SG_IDTYPE_COMPOSITE = SG_IDTYPE_COMPOSITE;

	const SG_IDTYPE_LEN = SG_IDTYPE_LEN;

	const SG_LICENSETYPE_DEFAULT = 0;

	const SG_LICENSETYPE_EXTERNAL = SG_LICENSETYPE_EXTERNAL;

	const SG_LICENSETYPE_INTERNAL = SG_LICENSETYPE_INTERNAL;

	const SG_LICENSETYPE_FLOATING = SG_LICENSETYPE_FLOATING;

	const SG_LICENSETYPE_LEN = SG_LICENSETYPE_LEN;

	const SG_LANGUAGE_DEFAULT = 0;

	const SG_LANGUAGE_GER = SG_LANGUAGE_GER;

	const SG_LANGUAGE_ENG = SG_LANGUAGE_ENG;

	const SG_LANGUAGE_SPA = SG_LANGUAGE_SPA;

	const SG_LANGUAGE_FRA = SG_LANGUAGE_FRA;

	const SG_LANGUAGE_ITA = SG_LANGUAGE_ITA;

	const SG_LANGUAGE_TUR = SG_LANGUAGE_TUR;

	const SG_LANGUAGE_KOR = SG_LANGUAGE_KOR;

	const SG_LANGUAGE_POR = SG_LANGUAGE_POR;

	const SG_LANGUAGE_DEU = SG_LANGUAGE_DEU;

	const SG_LANGUAGE_DUT = SG_LANGUAGE_DUT;

	const SG_LANGUAGE_RUM = SG_LANGUAGE_RUM;

	const SG_LANGUAGE_UKR = SG_LANGUAGE_UKR;

	const SG_LANGUAGE_SRP = SG_LANGUAGE_SRP;

	const SG_LANGUAGE_SWE = SG_LANGUAGE_SWE;

	const SG_LANGUAGE_DAN = SG_LANGUAGE_DAN;

	const SG_LANGUAGE_SLO = SG_LANGUAGE_SLO;

	const SG_LANGUAGE_SLV = SG_LANGUAGE_SLV;

	const SG_LANGUAGE_JPN = SG_LANGUAGE_JPN;

	const SG_LANGTYPE_LEN = SG_LANGTYPE_LEN;

	const SG_ACTIVATE_DEMO_NODE = 0;

	const SG_ACTIVATE_PAID_NODE = SG_ACTIVATE_PAID_NODE;

	const SG_ACTIVATE_DEMO_FLOAT = SG_ACTIVATE_DEMO_FLOAT;

	const SG_ACTIVATE_PAID_FLOAT = SG_ACTIVATE_PAID_FLOAT;

	const SG_DATECHECK_STANDARD = 0;

	const SG_DATECHECK_EXTENDED = SG_DATECHECK_EXTENDED;

	const SG_ATTR_DEFAULT_ID = 0;

	const SG_ATTR_IPHONE_ID = SG_ATTR_IPHONE_ID;

	const SG_ATTR_ANDROID_ID = SG_ATTR_ANDROID_ID;

	const SG_ATTR_BLACKBERRY_ID = SG_ATTR_BLACKBERRY_ID;

	const SG_ATTR_ETHERNET_ID = SG_ATTR_ETHERNET_ID;

	const SG_ATTR_HOSTNAME_ID = SG_ATTR_HOSTNAME_ID;

	const SG_ATTR_IPADDRESS_ID = SG_ATTR_IPADDRESS_ID;

	const SG_ATTR_USERNAME_ID = SG_ATTR_USERNAME_ID;

	const SG_ATTR_COUNTRY_ID = SG_ATTR_COUNTRY_ID;

	const SG_ATTR_INET6_ID = SG_ATTR_INET6_ID;

	const SG_ATTR_VSN_ID = SG_ATTR_VSN_ID;

	const SG_ATTR_VENDOR_ID = SG_ATTR_VENDOR_ID;

	const SG_ATTR_ANY_ID = SG_ATTR_ANY_ID;

	const SG_ATTR_HOSTID_ID = SG_ATTR_HOSTID_ID;

	const SG_ATTR_MACINTOSH_ID = SG_ATTR_MACINTOSH_ID;

	const SG_ATTR_METERED_ID = SG_ATTR_METERED_ID;

	const SG_ATTR_OS_ID = SG_ATTR_OS_ID;

	const SG_ATTR_COMPOSITE_ID = SG_ATTR_COMPOSITE_ID;

	const SG_ATTR_LOGFILE_PATH = SG_ATTR_LOGFILE_PATH;

	const SG_ATTR_DISALLOW_IDTYPE = SG_ATTR_DISALLOW_IDTYPE;

	const SG_ATTR_DISALLOW_ALL_IDTYPE = SG_ATTR_DISALLOW_ALL_IDTYPE;

	const SG_ATTR_ALLOW_IDTYPE = SG_ATTR_ALLOW_IDTYPE;

	const SG_ATTR_ALLOW_ALL_IDTYPE = SG_ATTR_ALLOW_ALL_IDTYPE;

	const SG_ATTR_LICENSETYPE = SG_ATTR_LICENSETYPE;

	const SG_ATTR_VENDOR_ROUTINE = SG_ATTR_VENDOR_ROUTINE;

	const SG_ATTR_VENDOR_LIBRARY = SG_ATTR_VENDOR_LIBRARY;

	const SG_ATTR_RELEASE = SG_ATTR_RELEASE;

	const SG_ATTR_ARCHITECTURE = SG_ATTR_ARCHITECTURE;

	const SG_ATTR_LANGUAGE = SG_ATTR_LANGUAGE;

	const SG_ATTR_EXE_PATH = SG_ATTR_EXE_PATH;

	const SG_ATTR_NULL = SG_ATTR_NULL;

	const SG_ATTR_TCP_TIMEOUT = SG_ATTR_TCP_TIMEOUT;

	const SG_ATTR_RETRY_INTERVAL = SG_ATTR_RETRY_INTERVAL;

	const SG_ATTR_RETRY_COUNT = SG_ATTR_RETRY_COUNT;

	const SG_ATTR_DISABLE_ALARM = SG_ATTR_DISABLE_ALARM;

	const SG_ATTR_LICENSE_FILE = SG_ATTR_LICENSE_FILE;

	const SG_ATTR_MAXIMUM_TIMEDIFF = SG_ATTR_MAXIMUM_TIMEDIFF;

	const SG_ATTR_DISABLE_ENV = SG_ATTR_DISABLE_ENV;

	const SG_ATTR_VENDOR_RECONNECT_EXIT = SG_ATTR_VENDOR_RECONNECT_EXIT;

	const SG_ATTR_VENDOR_RECONNECT = SG_ATTR_VENDOR_RECONNECT;

	const SG_ATTR_VENDOR_RECONNECT_COMPLETE = SG_ATTR_VENDOR_RECONNECT_COMPLETE;

	const SG_ATTR_VENDOR_RECONNECT_CHECKOUT_FAIL = SG_ATTR_VENDOR_RECONNECT_CHECKOUT_FAIL;

	const SG_ATTR_DATECHECK = SG_ATTR_DATECHECK;

	const SG_ATTR_DISABLE_LANG = SG_ATTR_DISABLE_LANG;

	const SG_ATTRTYPE_LEN = SG_ATTRTYPE_LEN;

	const SG_SUCCESS = SG_SUCCESS;

	const SG_AUTHORIZED = SG_AUTHORIZED;

	const SG_TARGET_FILE_NOT_FOUND = SG_TARGET_FILE_NOT_FOUND;

	const SG_NOT_AUTHORIZED_FOR_COMPONENT = SG_NOT_AUTHORIZED_FOR_COMPONENT;

	const SG_NOT_AUTHORIZED_FOR_VERSION = SG_NOT_AUTHORIZED_FOR_VERSION;

	const SG_COMPONENT_EXPIRED = SG_COMPONENT_EXPIRED;

	const SG_CANT_CREATE_TARGET_FILE = SG_CANT_CREATE_TARGET_FILE;

	const SG_CANT_GET_ID = SG_CANT_GET_ID;

	const SG_INVALID_CERTIFICATE = SG_INVALID_CERTIFICATE;

	const SG_INVALID_TARGET_INFORMATION = SG_INVALID_TARGET_INFORMATION;

	const SG_NO_MORE_COMPONENTS_IN_FILE = SG_NO_MORE_COMPONENTS_IN_FILE;

	const SG_NO_COMPONENT_MATCHING_ID = SG_NO_COMPONENT_MATCHING_ID;

	const SG_COMPONENT_NAME_TOO_LONG = SG_COMPONENT_NAME_TOO_LONG;

	const SG_CANT_WRITE_TO_TARGET_FILE = SG_CANT_WRITE_TO_TARGET_FILE;

	const SG_CANT_READ_TARGET_FILE = SG_CANT_READ_TARGET_FILE;

	const SG_INVALID_ID_LENGTH = SG_INVALID_ID_LENGTH;

	const SG_CANT_CREATE_TEMPORARY_FILE = SG_CANT_CREATE_TEMPORARY_FILE;

	const SG_CANT_OPEN_TEMPORARY_FILE = SG_CANT_OPEN_TEMPORARY_FILE;

	const SG_CANT_DELETE_TARGET_FILE = SG_CANT_DELETE_TARGET_FILE;

	const SG_CANT_RENAME_TARGET_FILE = SG_CANT_RENAME_TARGET_FILE;

	const SG_CANT_READ_TEXT_FILE = SG_CANT_READ_TEXT_FILE;

	const SG_CANT_WRITE_TEXT_FILE = SG_CANT_WRITE_TEXT_FILE;

	const SG_CANT_DELETE_TEXT_FILE = SG_CANT_DELETE_TEXT_FILE;

	const SG_CANT_RENAME_TEXT_FILE = SG_CANT_RENAME_TEXT_FILE;

	const SG_TEXT_FILE_NOT_FOUND = SG_TEXT_FILE_NOT_FOUND;

	const SG_NO_COMPONENT_FOUND_IN_FILE = SG_NO_COMPONENT_FOUND_IN_FILE;

	const SG_NO_FREE_SLOTS = SG_NO_FREE_SLOTS;

	const SG_INVALID_TIMEOUT = SG_INVALID_TIMEOUT;

	const SG_VERSION_LENGTH_TOO_LONG = SG_VERSION_LENGTH_TOO_LONG;

	const SG_IDTYPE_NOT_SUPPORTED = SG_IDTYPE_NOT_SUPPORTED;

	const SG_BAD_LICENSETYPE = SG_BAD_LICENSETYPE;

	const SG_ATTRTYPE_NOT_SUPPORTED = SG_ATTRTYPE_NOT_SUPPORTED;

	const SG_ATTRTYPE_INVALID = SG_ATTRTYPE_INVALID;

	const SG_CANT_CREATE_LOGFILE = SG_CANT_CREATE_LOGFILE;

	const SG_LOGFILE_NOT_SET = SG_LOGFILE_NOT_SET;

	const SG_INVALID_OPTION_FOR_LICENSETYPE = SG_INVALID_OPTION_FOR_LICENSETYPE;

	const SG_NO_MORE_CLIENT_COMPONENTS = SG_NO_MORE_CLIENT_COMPONENTS;

	const SG_NO_MORE_SERVER_COMPONENTS = SG_NO_MORE_SERVER_COMPONENTS;

	const SG_INVALID_LICENSE_KEY = SG_INVALID_LICENSE_KEY;

	const SG_VERSION_NOT_NUMERIC = SG_VERSION_NOT_NUMERIC;

	const SG_NOT_A_CALLABLE_OBJECT = SG_NOT_A_CALLABLE_OBJECT;

	const SG_SYSTEM_CLOCK_SET_BACK = SG_SYSTEM_CLOCK_SET_BACK;

	const SG_NO_MORE_SERVER_DETAIL = SG_NO_MORE_SERVER_DETAIL;

	const SG_INVALID_LICENSE_COUNT = SG_INVALID_LICENSE_COUNT;

	const SG_SERVERNORESPOND = SG_SERVERNORESPOND;

	const SG_BADCOMMUNICATION = SG_BADCOMMUNICATION;

	const SG_INVALIDHOST = SG_INVALIDHOST;

	const SG_BADCONNECT = SG_BADCONNECT;

	const SG_BADREAD = SG_BADREAD;

	const SG_BADWRITE = SG_BADWRITE;

	const SG_MAXSERVERCONNECTIONS = SG_MAXSERVERCONNECTIONS;

	const SG_LOSTCONNECT = SG_LOSTCONNECT;

	const SG_ALL_LICENSES_IN_USE = SG_ALL_LICENSES_IN_USE;

	const SG_NO_SUCH_COMPONENT = SG_NO_SUCH_COMPONENT;

	const SG_NOT_LICENSED_FOR_VERSION = SG_NOT_LICENSED_FOR_VERSION;

	const SG_ALREADY_CHECKED_OUT = SG_ALREADY_CHECKED_OUT;

	const SG_NOT_CHECKED_OUT = SG_NOT_CHECKED_OUT;

	const SG_TIMEDIFF_TOO_LARGE = SG_TIMEDIFF_TOO_LARGE;

	const SG_COMPONENT_NOT_AVAILABLE = SG_COMPONENT_NOT_AVAILABLE;

	const SG_COMPONENT_ALREADY_ISSUED = SG_COMPONENT_ALREADY_ISSUED;

	const SG_BAD_PASSWORD = SG_BAD_PASSWORD;

	const SG_CANT_QUERY_SQLDB = SG_CANT_QUERY_SQLDB;

	const SG_CANT_CONNECT_TO_SQLDB = SG_CANT_CONNECT_TO_SQLDB;

	const SG_WRONG_SERVER = SG_WRONG_SERVER;

	const SG_REJECTED = SG_REJECTED;

	const SG_NOLOG = SG_NOLOG;

	const SG_UNKNOWN_ERROR = SG_UNKNOWN_ERROR;

	static function new_intp() {
		return new_intp();
	}

	static function copy_intp($value) {
		return copy_intp($value);
	}

	static function delete_intp($obj) {
		delete_intp($obj);
	}

	static function intp_assign($obj,$value) {
		intp_assign($obj,$value);
	}

	static function intp_value($obj) {
		return intp_value($obj);
	}

	static function sgGenerateDate($days,$out_expires) {
		return sgGenerateDate($days,$out_expires);
	}

	static function sgExtractComponent($target,$out_component,$out_version,$out_id,$out_idtype,$out_expires,$out_certificate) {
		return sgExtractComponent($target,$out_component,$out_version,$out_id,$out_idtype,$out_expires,$out_certificate);
	}

	static function sgEnableComponent($target,$component,$version,$id,$idtype,$expires,$certificate) {
		return sgEnableComponent($target,$component,$version,$id,$idtype,$expires,$certificate);
	}

	static function sgDisableComponent($target,$component,$version,$id,$idtype) {
		return sgDisableComponent($target,$component,$version,$id,$idtype);
	}

	static function sgEnableAllComponents($target,$file) {
		return sgEnableAllComponents($target,$file);
	}

	static function sgValidateComponent($component,$version,$id,$idtype,$expires,$certificate) {
		return sgValidateComponent($component,$version,$id,$idtype,$expires,$certificate);
	}

	static function sgAuthorized($target,$component,$version) {
		return sgAuthorized($target,$component,$version);
	}

	static function sgExpireDays($target,$component,$version,$days) {
		return sgExpireDays($target,$component,$version,$days);
	}

	static function sgGetLastErrorString($out_errorstring) {
		return sgGetLastErrorString($out_errorstring);
	}

	static function sgConnect() {
		return sgConnect();
	}

	static function sgTest($component,$version) {
		return sgTest($component,$version);
	}

	static function sgCheckout($component,$version) {
		return sgCheckout($component,$version);
	}

	static function sgCheckin($component,$version) {
		return sgCheckin($component,$version);
	}

	static function sgTimer() {
		return sgTimer();
	}

	static function sgDisconnect() {
		return sgDisconnect();
	}

	static function sgPing() {
		return sgPing();
	}

	static function sgShutdown() {
		return sgShutdown();
	}

	static function sgRestart() {
		return sgRestart();
	}

	static function sgShowClient($out_serverhost,$out_clienthost,$out_user,$out_component,$out_version,$count) {
		return sgShowClient($out_serverhost,$out_clienthost,$out_user,$out_component,$out_version,$count);
	}

	static function sgShowServer($out_component,$out_version,$out_id,$out_idtype,$count,$current,$out_expires,$out_certificate) {
		return sgShowServer($out_component,$out_version,$out_id,$out_idtype,$count,$current,$out_expires,$out_certificate);
	}

	static function sgShowServerDetail($thread_id,$sockfd,$out_ip,$pid,$out_process,$out_user,$out_host,$out_component,$out_version,$count) {
		return sgShowServerDetail($thread_id,$sockfd,$out_ip,$pid,$out_process,$out_user,$out_host,$out_component,$out_version,$count);
	}

	static function sgSetAttrInt($attr,$val) {
		return sgSetAttrInt($attr,$val);
	}

	static function sgSetAttrStr($attr,$val) {
		return sgSetAttrStr($attr,$val);
	}

	static function sgGetAttrStr($attr,$out_str) {
		return sgGetAttrStr($attr,$out_str);
	}

	static function sgGetAttrInt($attr,$out_int) {
		return sgGetAttrInt($attr,$out_int);
	}

	static function sgArc4($direction,$key,$instring,$out_arc4) {
		return sgArc4($direction,$key,$instring,$out_arc4);
	}

	static function sgDash($direction,$inkey,$out_dash) {
		return sgDash($direction,$inkey,$out_dash);
	}

	static function sgEnableComponentLine($target,$componentline) {
		return sgEnableComponentLine($target,$componentline);
	}

	static function sgPaActivate($web,$port,$activatetype,$cust,$component,$version,$email,$out_srv,$out_lic) {
		return sgPaActivate($web,$port,$activatetype,$cust,$component,$version,$email,$out_srv,$out_lic);
	}

	static function sgPaGetInstallationCode($idtype,$out_ic) {
		return sgPaGetInstallationCode($idtype,$out_ic);
	}

	static function sgPaGetDemoActivationKeys($web,$port,$component,$version,$email,$ic,$out_lk,$out_ak) {
		return sgPaGetDemoActivationKeys($web,$port,$component,$version,$email,$ic,$out_lk,$out_ak);
	}

	static function sgPaGetPaidActivationKeys($web,$port,$cust,$component,$version,$email,$ic,$out_lk,$out_ak) {
		return sgPaGetPaidActivationKeys($web,$port,$cust,$component,$version,$email,$ic,$out_lk,$out_ak);
	}

	static function sgPaAssembleKeys($ic,$lk,$ak,$out_lic) {
		return sgPaAssembleKeys($ic,$lk,$ak,$out_lic);
	}

	static function sgPaDecodeKey($lk,$out_component,$out_version,$out_idtype,$out_expires) {
		return sgPaDecodeKey($lk,$out_component,$out_version,$out_idtype,$out_expires);
	}

	static function sgPaShutdown($web,$port,$password) {
		return sgPaShutdown($web,$port,$password);
	}

	static function sgPaRestart($web,$port,$password) {
		return sgPaRestart($web,$port,$password);
	}

	static function sgPaShowlog($web,$port,$password,$out_logfile) {
		return sgPaShowlog($web,$port,$password,$out_logfile);
	}
}

/* PHP Proxy Classes */

?>
